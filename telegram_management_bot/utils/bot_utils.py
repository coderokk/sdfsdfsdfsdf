# telegram_management_bot/keyboards/inline_keyboards.py
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder # –î–ª—è aiogram 3.x
from typing import List, Optional, Dict, Any

from ..utils.bot_utils import CONFIRM_YES, CONFIRM_NO, CANCEL_ACTION, PaginatorCallback, ActionWithIdCallback, ConfirmationCallback

# --- Main Menu ---
def get_main_menu_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="üñ•Ô∏è Manage Services", callback_data="manage_services"))
    builder.row(InlineKeyboardButton(text="üì± Manage Sessions", callback_data="manage_sessions"))
    builder.row(InlineKeyboardButton(text="‚öôÔ∏è FastAPI Configuration", callback_data="fastapi_config"))
    builder.row(InlineKeyboardButton(text="üìä Stats & Monitoring", callback_data="stats_monitoring"))
    # builder.row(InlineKeyboardButton(text="‚ùî Help", callback_data="help_info")) # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É –ø–æ–º–æ—â–∏
    return builder.as_markup()

# --- Manage Services Menu ---
def get_manage_services_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="üöÄ Restart FastAPI", callback_data="svc_restart_fastapi"),
        InlineKeyboardButton(text="ü§ñ Restart Bot", callback_data="svc_restart_bot")
    )
    builder.row(
        InlineKeyboardButton(text="üìù FastAPI Logs", callback_data="svc_view_fastapi_logs"),
        InlineKeyboardButton(text="üìú Bot Logs", callback_data="svc_view_bot_logs")
    )
    builder.row(
        InlineKeyboardButton(text="üîÑ Update FastAPI Script", callback_data="svc_update_fastapi_script"),
        # InlineKeyboardButton(text="üîÑ Update Bot Script", callback_data="svc_update_bot_script") # –ü–æ–∫–∞ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ–º, —Ç.–∫. —Å–ª–æ–∂–Ω–µ–µ
    )
    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è Back to Main Menu", callback_data="main_menu"))
    return builder.as_markup()

# --- Manage Sessions Menu ---
def get_manage_sessions_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="‚ûï Add Session", callback_data="session_add_new"))
    builder.row(InlineKeyboardButton(text="‚ûñ Delete Session", callback_data="session_delete_select"))
    builder.row(InlineKeyboardButton(text="üìã List Sessions", callback_data="session_list_all:page:0")) # –ù–∞—á–∏–Ω–∞–µ–º —Å 0 —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    # builder.row(InlineKeyboardButton(text="‚ÑπÔ∏è Session Details", callback_data="session_details_select")) # –î–µ—Ç–∞–ª–∏ –º–æ–∂–Ω–æ –≤—Å—Ç—Ä–æ–∏—Ç—å –≤ List
    builder.row(
        InlineKeyboardButton(text="‚ùÑÔ∏è Freeze Session", callback_data="session_freeze_select"),
        InlineKeyboardButton(text="‚òÄÔ∏è Unfreeze Session", callback_data="session_unfreeze_select")
    )
    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è Back to Main Menu", callback_data="main_menu"))
    return builder.as_markup()

# --- FastAPI Configuration Menu ---
def get_fastapi_config_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="üìÑ View .env", callback_data="config_view_env"))
    builder.row(InlineKeyboardButton(text="‚úèÔ∏è Edit .env Variable", callback_data="config_edit_env_var_name"))
    builder.row(InlineKeyboardButton(text="‚ûï Add .env Variable", callback_data="config_add_env_var_name"))
    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è Back to Main Menu", callback_data="main_menu"))
    return builder.as_markup()

# --- Stats & Monitoring Menu ---
def get_stats_monitoring_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="üìà FastAPI Status (/health)", callback_data="stats_fastapi_health"))
    builder.row(InlineKeyboardButton(text="üíæ Session Stats Overview", callback_data="stats_session_overview"))
    builder.row(InlineKeyboardButton(text="üì® Webhook Tasks DB", callback_data="stats_webhook_db_export"))
    # builder.row(InlineKeyboardButton(text="‚öôÔ∏è Server Resources", callback_data="stats_server_resources")) # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è Back to Main Menu", callback_data="main_menu"))
    return builder.as_markup()

# --- Confirmation Keyboard ---
def get_confirmation_keyboard(action_prefix: str, item_id: Optional[str] = None) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    yes_cb = ConfirmationCallback(action_prefix, CONFIRM_YES, item_id)
    no_cb = ConfirmationCallback(action_prefix, CONFIRM_NO, item_id)
    
    builder.row(
        InlineKeyboardButton(text="‚úÖ Confirm Yes", callback_data=yes_cb),
        InlineKeyboardButton(text="‚ùå Cancel No", callback_data=no_cb)
    )
    return builder.as_markup()

# --- Back to Menu Keyboard ---
def get_back_to_menu_keyboard(menu_callback: str = "main_menu", text: str = "‚¨ÖÔ∏è Back") -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text=text, callback_data=menu_callback))
    return builder.as_markup()

# --- Pagination Keyboard ---
def get_pagination_keyboard(action_prefix: str, current_page: int, total_pages: int,
                            back_menu_callback: Optional[str] = None) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    row_buttons = []
    if current_page > 0:
        row_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è Prev", callback_data=PaginatorCallback(action_prefix, current_page - 1)))
    
    row_buttons.append(InlineKeyboardButton(text=f"üìÑ {current_page + 1}/{total_pages}", callback_data="noop")) # noop - –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞—Ç—å

    if current_page < total_pages - 1:
        row_buttons.append(InlineKeyboardButton(text="Next ‚û°Ô∏è", callback_data=PaginatorCallback(action_prefix, current_page + 1)))
    
    if row_buttons: # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        builder.row(*row_buttons)

    if back_menu_callback:
        builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è Back", callback_data=back_menu_callback))
    return builder.as_markup()


# --- Keyboard for selecting an item from a list (e.g., session to delete/freeze) ---
def get_item_selection_keyboard(
    items: List[Dict[str, str]], # –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π, –∫–∞–∂–¥—ã–π —Å 'id' –∏ 'text'
    action_prefix: str, # –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è callback_data –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —ç–ª–µ–º–µ–Ω—Ç–∞
    page: int,
    page_size: int,
    back_menu_callback: str
) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    
    if not items:
        builder.row(InlineKeyboardButton(text="No items to display.", callback_data="noop"))
        builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è Back", callback_data=back_menu_callback))
        return builder.as_markup()

    total_items = len(items)
    total_pages = (total_items + page_size - 1) // page_size
    
    start_index = page * page_size
    end_index = start_index + page_size
    current_page_items = items[start_index:end_index]

    for item in current_page_items:
        builder.row(InlineKeyboardButton(text=item['text'], callback_data=ActionWithIdCallback(action_prefix, item['id'])))
        
    # Pagination controls
    pagination_row = []
    if page > 0:
        pagination_row.append(InlineKeyboardButton(text="‚¨ÖÔ∏è Prev", callback_data=PaginatorCallback(action_prefix + "_page", page - 1)))
    
    if total_pages > 1 : # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏—Ö –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π
         pagination_row.append(InlineKeyboardButton(text=f"üìÑ {page + 1}/{total_pages}", callback_data="noop"))

    if page < total_pages - 1:
        pagination_row.append(InlineKeyboardButton(text="Next ‚û°Ô∏è", callback_data=PaginatorCallback(action_prefix + "_page", page + 1)))
    
    if pagination_row:
        builder.row(*pagination_row)
        
    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è Back", callback_data=back_menu_callback))
    return builder.as_markup()