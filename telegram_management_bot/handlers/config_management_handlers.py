# telegram_management_bot/handlers/config_management_handlers.py
import logging
import os
from pathlib import Path
import re
import tempfile

from aiogram import Router, F, Bot
from aiogram.filters import StateFilter
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import aiofiles

from .. import bot_config
from ..keyboards.inline_keyboards import (
    get_confirmation_keyboard,
    get_fastapi_config_keyboard,
    get_back_to_menu_keyboard
)
from ..utils.bot_utils import AdminFilter, get_user_info, CONFIRM_YES, CONFIRM_NO, CANCEL_ACTION

logger = logging.getLogger(__name__)
router = Router()
router.callback_query.filter(AdminFilter(bot_config.ADMIN_IDS))
router.message.filter(AdminFilter(bot_config.ADMIN_IDS)) # –î–ª—è FSM

# --- FSM –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è/–¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö .env ---
class EnvEditStates(StatesGroup):
    waiting_for_var_name_to_edit = State()
    waiting_for_var_value_to_edit = State()
    waiting_for_var_name_to_add = State()
    waiting_for_var_value_to_add = State()

# --- –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å .env —Ñ–∞–π–ª–æ–º ---
SENSITIVE_ENV_KEYS = ["API_HASH", "S3_SECRET_ACCESS_KEY", "FASTAPI_CLIENT_API_KEY", "BOT_TOKEN"] # –ö–ª—é—á–∏ –¥–ª—è –º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–∏—è

def mask_sensitive_value(key: str, value: str) -> str:
    if key.upper() in SENSITIVE_ENV_KEYS:
        if len(value) > 4:
            return value[:2] + "*" * (len(value) - 4) + value[-2:]
        return "****"
    return value

async def read_env_file_content(path: Path) -> str:
    if not path.exists():
        return "Error: .env file not found at specified path."
    try:
        async with aiofiles.open(path, "r", encoding="utf-8") as f:
            lines = await f.readlines()
        
        masked_lines = []
        for line in lines:
            line = line.strip()
            if not line or line.startswith("#"): # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
                masked_lines.append(line)
                continue
            if "=" in line:
                key, value = line.split("=", 1)
                key = key.strip()
                value = value.strip().strip('"').strip("'") # –£–±–∏—Ä–∞–µ–º –∫–∞–≤—ã—á–∫–∏ –¥–ª—è –º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–∏—è
                masked_lines.append(f"{key}={mask_sensitive_value(key, value)}")
            else:
                masked_lines.append(line) # –°—Ç—Ä–æ–∫–∏ –±–µ–∑ "=" (–Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º)
        return "\n".join(masked_lines)
    except Exception as e:
        logger.error(f"Error reading .env file {path}: {e}")
        return f"Error reading .env file: {e}"

async def update_env_variable(path: Path, var_name: str, new_value: str) -> bool:
    if not path.exists():
        logger.error(f".env file not found at {path} for update.")
        return False
    try:
        async with aiofiles.open(path, "r+", encoding="utf-8") as f:
            lines = await f.readlines()
            new_lines = []
            found = False
            var_name_upper = var_name.upper() # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞ –¥–ª—è –∫–ª—é—á–∞

            for line in lines:
                stripped_line = line.strip()
                if not stripped_line.startswith("#") and "=" in stripped_line:
                    key, _ = stripped_line.split("=", 1)
                    if key.strip().upper() == var_name_upper:
                        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ: –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–µ–ª—ã, –∑–∞–∫–ª—é—á–∞–µ–º –≤ –∫–∞–≤—ã—á–∫–∏
                        formatted_value = f'"{new_value}"' if " " in new_value else new_value
                        new_lines.append(f"{var_name}={formatted_value}\n")
                        found = True
                        logger.info(f"Updated variable '{var_name}' in .env file.")
                    else:
                        new_lines.append(line)
                else:
                    new_lines.append(line)
            
            if not found: # –ï—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —ç—Ç–æ –æ—à–∏–±–∫–∞ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ update
                logger.warning(f"Variable '{var_name}' not found in .env for update. This function should only update existing.")
                return False # –ò–ª–∏ –º–æ–∂–Ω–æ —Ä–µ—à–∏—Ç—å –¥–æ–±–∞–≤–ª—è—Ç—å, –Ω–æ —ç—Ç–æ –ª–æ–≥–∏–∫–∞ add_env_variable

            await f.seek(0)
            await f.writelines(new_lines)
            await f.truncate()
        return True
    except Exception as e:
        logger.error(f"Error updating .env file {path}: {e}")
        return False

async def add_env_variable(path: Path, var_name: str, var_value: str) -> bool:
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è (–±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞)
        var_name_upper = var_name.upper()
        if path.exists():
            async with aiofiles.open(path, "r", encoding="utf-8") as f:
                lines = await f.readlines()
            for line in lines:
                stripped_line = line.strip()
                if not stripped_line.startswith("#") and "=" in stripped_line:
                    key, _ = stripped_line.split("=", 1)
                    if key.strip().upper() == var_name_upper:
                        logger.warning(f"Variable '{var_name}' already exists in .env. Use edit instead.")
                        return False # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞
        async with aiofiles.open(path, "a", encoding="utf-8") as f:
            formatted_value = f'"{var_value}"' if " " in var_value else var_value
            await f.write(f"\n{var_name}={formatted_value}\n") # –î–æ–±–∞–≤–ª—è–µ–º —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã
        logger.info(f"Added variable '{var_name}' to .env file.")
        return True
    except Exception as e:
        logger.error(f"Error adding to .env file {path}: {e}")
        return False

# --- –ü—Ä–æ—Å–º–æ—Ç—Ä .env ---
@router.callback_query(F.data == "config_view_env")
async def cq_view_env(callback_query: CallbackQuery):
    user_info = get_user_info(callback_query.from_user)
    logger.info(f"Admin {user_info} requested to view FastAPI .env file.")
    await callback_query.message.edit_text("üìÑ Fetching .env content... Please wait.", reply_markup=None)
    
    env_content = await read_env_file_content(bot_config.FASTAPI_ENV_PATH)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç, –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
    if len(env_content) > 4000:
        try:
            with tempfile.NamedTemporaryFile(mode="w+", delete=False, suffix=".env", encoding="utf-8") as tmp_file:
                # –ü–∏—à–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π (–Ω–µ–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π) –∫–æ–Ω—Ç–µ–Ω—Ç –≤ —Ñ–∞–π–ª –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è, –µ—Å–ª–∏ —ç—Ç–æ –Ω—É–∂–Ω–æ
                # –ù–æ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ª—É—á—à–µ —Ç–æ–∂–µ –º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
                async with aiofiles.open(bot_config.FASTAPI_ENV_PATH, "r", encoding="utf-8") as f_orig:
                     original_content_for_file = await f_orig.read()
                tmp_file.write(original_content_for_file) # –ò–ª–∏ env_content, –µ—Å–ª–∏ —Ö–æ—Ç–∏–º –º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
                tmp_file_path = tmp_file.name
            
            await callback_query.message.answer_document(
                document=aiofiles.os.path.abspath(tmp_file_path),
                caption="FastAPI .env File (sensitive values might be masked in preview)",
                reply_markup=get_back_to_menu_keyboard("fastapi_config", "‚¨ÖÔ∏è Back to Config")
            )
            await callback_query.message.delete()
            os.remove(tmp_file_path)
        except Exception as e:
            logger.error(f"Error sending .env as document: {e}")
            await callback_query.message.edit_text(
                f"üìÑ FastAPI .env Content (masked, full content too large for message):\n\n"
                f"```\n{env_content[-2000:]}\n```", # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ö–≤–æ—Å—Ç
                parse_mode="Markdown",
                reply_markup=get_back_to_menu_keyboard("fastapi_config", "‚¨ÖÔ∏è Back to Config")
            )
    else:
        await callback_query.message.edit_text(
            f"üìÑ FastAPI .env Content (sensitive values masked):\n\n```\n{env_content}\n```",
            parse_mode="Markdown",
            reply_markup=get_back_to_menu_keyboard("fastapi_config", "‚¨ÖÔ∏è Back to Config")
        )
    await callback_query.answer()

# --- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π .env ---
CALLBACK_PREFIX_CONFIRM_EDIT_ENV = "confirm_edit_env"
@router.callback_query(F.data == "config_edit_env_var_name")
async def cq_edit_env_var_name_start(callback_query: CallbackQuery, state: FSMContext):
    user_info = get_user_info(callback_query.from_user)
    logger.info(f"Admin {user_info} initiated .env variable edit.")
    await state.set_state(EnvEditStates.waiting_for_var_name_to_edit)
    await callback_query.message.edit_text(
        "‚úèÔ∏è **Edit .env Variable**\n\n"
        "Please send the name of the variable you want to edit (e.g., `S3_BUCKET_NAME`).",
        reply_markup=get_back_to_menu_keyboard(CANCEL_ACTION, "‚ùå Cancel") # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã FSM
    )
    await callback_query.answer()

@router.message(StateFilter(EnvEditStates.waiting_for_var_name_to_edit))
async def process_env_var_name_to_edit(message: Message, state: FSMContext):
    var_name = message.text.strip()
    if not re.match(r"^[A-Za-z_][A-Za-z0-9_]*$", var_name): # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–µ–Ω–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
        await message.reply("‚ùå Invalid variable name format. Please use letters, numbers, and underscores, starting with a letter or underscore.")
        return
    
    await state.update_data(var_name_to_edit=var_name)
    await state.set_state(EnvEditStates.waiting_for_var_value_to_edit)
    await message.answer(
        f"OK. Now send the new value for variable `{var_name}`.\n"
        "Sensitive values will be stored as is.",
        parse_mode="Markdown",
        reply_markup=get_back_to_menu_keyboard(CANCEL_ACTION, "‚ùå Cancel")
    )

@router.message(StateFilter(EnvEditStates.waiting_for_var_value_to_edit))
async def process_env_var_value_to_edit(message: Message, state: FSMContext):
    var_value = message.text.strip() # –ù–µ —É–±–∏—Ä–∞–µ–º –∫–∞–≤—ã—á–∫–∏, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Ö –≤–≤–µ–ª
    data = await state.get_data()
    var_name = data.get("var_name_to_edit")

    await state.update_data(var_value_to_edit=var_value)
    
    await message.answer(
        f"‚ö†Ô∏è **Confirm .env Edit** ‚ö†Ô∏è\n\n"
        f"You are about to set:\n`{var_name}` = `{mask_sensitive_value(var_name, var_value)}` (value will be stored as entered)\n\n"
        "This will modify the `.env` file of the FastAPI service. Are you sure?",
        parse_mode="Markdown",
        reply_markup=get_confirmation_keyboard(CALLBACK_PREFIX_CONFIRM_EDIT_ENV)
    )

@router.callback_query(F.data.startswith(CALLBACK_PREFIX_CONFIRM_EDIT_ENV), StateFilter(EnvEditStates.waiting_for_var_value_to_edit))
async def cq_confirm_env_edit_action(callback_query: CallbackQuery, state: FSMContext):
    user_info = get_user_info(callback_query.from_user)
    action = callback_query.data.split(":")[2]
    data = await state.get_data()
    var_name = data.get("var_name_to_edit")
    var_value = data.get("var_value_to_edit")

    if action == CONFIRM_YES:
        logger.info(f"Admin {user_info} confirmed editing .env variable '{var_name}'.")
        
        # –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–¥–µ–ª–∞—Ç—å –±—ç–∫–∞–ø .env –ø–µ—Ä–µ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º
        env_path = bot_config.FASTAPI_ENV_PATH
        backup_env_path = env_path.with_suffix(f".backup_{Path(env_path).stat().st_mtime:.0f}.env")
        if env_path.exists():
            try:
                os.rename(env_path, backup_env_path)
                logger.info(f"Backed up .env to {backup_env_path.name}")
            except Exception as e_backup:
                logger.error(f"Failed to backup .env before edit: {e_backup}")
                await callback_query.message.edit_text(
                    f"‚ùå Failed to create .env backup. Aborting edit.",
                    reply_markup=get_fastapi_config_keyboard()
                )
                await state.clear()
                await callback_query.answer("Backup failed.", show_alert=True)
                return

        success = await update_env_variable(backup_env_path, var_name, var_value) # –û–±–Ω–æ–≤–ª—è–µ–º –±—ç–∫–∞–ø
        
        if success:
            os.rename(backup_env_path, env_path) # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –±—ç–∫–∞–ø –æ–±—Ä–∞—Ç–Ω–æ
            await callback_query.message.edit_text(
                f"‚úÖ Variable `{var_name}` updated in `.env` file.\n"
                "A restart of the FastAPI service is required for changes to take effect.",
                parse_mode="Markdown",
                reply_markup=get_fastapi_config_keyboard()
            )
        else:
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –±—ç–∫–∞–ø, –µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å
            if backup_env_path.exists() and env_path.exists() and env_path.read_bytes() != backup_env_path.read_bytes(): # –ï—Å–ª–∏ env_path –±—ã–ª —Å–æ–∑–¥–∞–Ω –ø—É—Å—Ç–æ–π –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω
                 os.remove(env_path) # –£–¥–∞–ª—è–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –∏—Å–ø–æ—Ä—á–µ–Ω–Ω—ã–π
                 os.rename(backup_env_path, env_path)
                 logger.info(f"Restored original .env from backup after failed update.")
            elif not env_path.exists() and backup_env_path.exists(): # –ï—Å–ª–∏ env_path –±—ã–ª —É–¥–∞–ª–µ–Ω
                 os.rename(backup_env_path, env_path)
                 logger.info(f"Restored original .env from backup after failed update (env was missing).")


            await callback_query.message.edit_text(
                f"‚ùå Failed to update variable `{var_name}` in `.env` file. "
                "This could be because the variable was not found or due to a file error. Original .env restored if backup was made.",
                parse_mode="Markdown",
                reply_markup=get_fastapi_config_keyboard()
            )
    elif action == CONFIRM_NO:
        logger.info(f"Admin {user_info} canceled editing .env variable '{var_name}'.")
        await callback_query.message.edit_text(
            "üö´ .env variable edit canceled.",
            reply_markup=get_fastapi_config_keyboard()
        )
    
    await state.clear()
    await callback_query.answer()


# --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –≤ .env ---
CALLBACK_PREFIX_CONFIRM_ADD_ENV = "confirm_add_env"
# (–õ–æ–≥–∏–∫–∞ FSM –±—É–¥–µ—Ç –æ—á–µ–Ω—å –ø–æ—Ö–æ–∂–∞ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –ø–æ—ç—Ç–æ–º—É –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏ –º–æ–∂–Ω–æ –µ–µ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏)
# –ù–∞—á–∞–ª–æ FSM –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
@router.callback_query(F.data == "config_add_env_var_name")
async def cq_add_env_var_name_start(callback_query: CallbackQuery, state: FSMContext):
    user_info = get_user_info(callback_query.from_user)
    logger.info(f"Admin {user_info} initiated adding new .env variable.")
    await state.set_state(EnvEditStates.waiting_for_var_name_to_add)
    await callback_query.message.edit_text(
        "‚ûï **Add .env Variable**\n\n"
        "Please send the name of the new variable (e.g., `NEW_FEATURE_FLAG`).",
        reply_markup=get_back_to_menu_keyboard(CANCEL_ACTION, "‚ùå Cancel")
    )
    await callback_query.answer()

@router.message(StateFilter(EnvEditStates.waiting_for_var_name_to_add))
async def process_env_var_name_to_add(message: Message, state: FSMContext):
    var_name = message.text.strip()
    if not re.match(r"^[A-Za-z_][A-Za-z0-9_]*$", var_name):
        await message.reply("‚ùå Invalid variable name format.")
        return
    
    await state.update_data(var_name_to_add=var_name)
    await state.set_state(EnvEditStates.waiting_for_var_value_to_add)
    await message.answer(
        f"OK. Now send the value for the new variable `{var_name}`.",
        parse_mode="Markdown",
        reply_markup=get_back_to_menu_keyboard(CANCEL_ACTION, "‚ùå Cancel")
    )

@router.message(StateFilter(EnvEditStates.waiting_for_var_value_to_add))
async def process_env_var_value_to_add(message: Message, state: FSMContext):
    var_value = message.text.strip()
    data = await state.get_data()
    var_name = data.get("var_name_to_add")

    await state.update_data(var_value_to_add=var_value)
    
    await message.answer(
        f"‚ö†Ô∏è **Confirm .env Add** ‚ö†Ô∏è\n\n"
        f"You are about to add:\n`{var_name}` = `{mask_sensitive_value(var_name, var_value)}`\n\n"
        "This will append to the `.env` file of the FastAPI service. Are you sure?",
        parse_mode="Markdown",
        reply_markup=get_confirmation_keyboard(CALLBACK_PREFIX_CONFIRM_ADD_ENV)
    )

@router.callback_query(F.data.startswith(CALLBACK_PREFIX_CONFIRM_ADD_ENV), StateFilter(EnvEditStates.waiting_for_var_value_to_add))
async def cq_confirm_env_add_action(callback_query: CallbackQuery, state: FSMContext):
    user_info = get_user_info(callback_query.from_user)
    action = callback_query.data.split(":")[2]
    data = await state.get_data()
    var_name = data.get("var_name_to_add")
    var_value = data.get("var_value_to_add")

    if action == CONFIRM_YES:
        logger.info(f"Admin {user_info} confirmed adding .env variable '{var_name}'.")
        
        # –ë—ç–∫–∞–ø –ø–µ—Ä–µ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º
        env_path = bot_config.FASTAPI_ENV_PATH
        backup_env_path = env_path.with_suffix(f".backup_{Path(env_path).stat().st_mtime:.0f}.env")
        if env_path.exists():
            try:
                # –ö–æ–ø–∏—Ä—É–µ–º, –∞ –Ω–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º, —Ç.–∫. –±—É–¥–µ–º –¥–æ–±–∞–≤–ª—è—Ç—å –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π
                async with aiofiles.open(env_path, "rb") as f_src, aiofiles.open(backup_env_path, "wb") as f_dst:
                    await f_dst.write(await f_src.read())
                logger.info(f"Backed up .env to {backup_env_path.name}")
            except Exception as e_backup:
                logger.error(f"Failed to backup .env before add: {e_backup}")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –±—ç–∫–∞–ø–∞, –Ω–æ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º
                await callback_query.answer("Warning: Failed to create .env backup.", show_alert=True)


        success = await add_env_variable(env_path, var_name, var_value)
        
        if success:
            await callback_query.message.edit_text(
                f"‚úÖ Variable `{var_name}` added to `.env` file.\n"
                "A restart of the FastAPI service is required for changes to take effect.",
                parse_mode="Markdown",
                reply_markup=get_fastapi_config_keyboard()
            )
        else:
            await callback_query.message.edit_text(
                f"‚ùå Failed to add variable `{var_name}` to `.env` file. "
                "This could be because the variable already exists or due to a file error.",
                parse_mode="Markdown",
                reply_markup=get_fastapi_config_keyboard()
            )
    elif action == CONFIRM_NO:
        logger.info(f"Admin {user_info} canceled adding .env variable '{var_name}'.")
        await callback_query.message.edit_text(
            "üö´ .env variable add canceled.",
            reply_markup=get_fastapi_config_keyboard()
        )
    
    await state.clear()
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –≤ FSM –¥–ª—è .env
@router.message(StateFilter(EnvEditStates))
async def process_env_edit_invalid_input(message: Message, state: FSMContext):
    await message.reply("Invalid input for current step. Please provide the requested information or cancel.",
                        reply_markup=get_back_to_menu_keyboard(CANCEL_ACTION, "‚ùå Cancel Operation"))