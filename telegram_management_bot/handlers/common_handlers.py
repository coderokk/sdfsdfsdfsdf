# telegram_management_bot/handlers/common_handlers.py
import logging
from aiogram import Router, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext # –ï—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è

from .. import bot_config
from ..keyboards.inline_keyboards import get_main_menu_keyboard, get_back_to_menu_keyboard
from ..utils.bot_utils import AdminFilter, get_user_info, CANCEL_ACTION

logger = logging.getLogger(__name__)
router = Router()

# –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∫–æ –≤—Å–µ–º —Ö—ç–Ω–¥–ª–µ—Ä–∞–º –≤ —ç—Ç–æ–º —Ä–æ—É—Ç–µ—Ä–µ, –∫—Ä–æ–º–µ —Ç–µ—Ö, –≥–¥–µ –æ–Ω –Ω–µ –Ω—É–∂–µ–Ω
# router.message.filter(AdminFilter(bot_config.ADMIN_IDS))
# router.callback_query.filter(AdminFilter(bot_config.ADMIN_IDS))
# –õ—É—á—à–µ –ø—Ä–∏–º–µ–Ω—è—Ç—å —Ñ–∏–ª—å—Ç—Ä —Ç–æ—á–µ—á–Ω–æ –∫ –∑–∞—â–∏—â–∞–µ–º—ã–º –∫–æ–º–∞–Ω–¥–∞–º.

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start ---
@router.message(CommandStart(), AdminFilter(bot_config.ADMIN_IDS))
async def handle_start_admin(message: Message, state: FSMContext):
    user_info = get_user_info(message.from_user)
    logger.info(f"/start command received from admin {user_info}")
    await state.clear() # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
    await message.answer(
        f"üëã Welcome, Admin {message.from_user.first_name}!\n\n"
        "This bot helps you manage the FastAPI Telegram File Processor service.",
        reply_markup=get_main_menu_keyboard()
    )

@router.message(CommandStart()) # –î–ª—è –Ω–µ-–∞–¥–º–∏–Ω–æ–≤
async def handle_start_non_admin(message: Message):
    user_info = get_user_info(message.from_user)
    logger.warning(f"/start command received from NON-ADMIN {user_info}. Access denied.")
    await message.answer(
        "üö´ Access Denied.\n"
        "You are not authorized to use this bot. Please contact the administrator."
    )
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –æ –ø–æ–ø—ã—Ç–∫–µ –¥–æ—Å—Ç—É–ø–∞
    # for admin_id in bot_config.ADMIN_IDS:
    #     try:
    #         await message.bot.send_message(admin_id, f"Unauthorized access attempt by {user_info}")
    #     except Exception as e:
    #         logger.error(f"Failed to send unauthorized access notification to admin {admin_id}: {e}")


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help ---
@router.message(Command("help"), AdminFilter(bot_config.ADMIN_IDS))
async def handle_help_admin(message: Message):
    user_info = get_user_info(message.from_user)
    logger.info(f"/help command received from admin {user_info}")
    help_text = (
        "‚ÑπÔ∏è **Bot Help & Commands**\n\n"
        "This bot allows you to manage the FastAPI service and its Telegram client sessions.\n\n"
        "üîπ **Main Menu Navigation**:\n"
        "  - Use the inline buttons from /start to navigate through features.\n\n"
        "üîπ **Available Commands for Admins**:\n"
        "  - `/start` - Show the main menu.\n"
        "  - `/help` - Show this help message.\n"
        "  - `/status` - Get a quick health status of the FastAPI service.\n\n"
        "üîπ **Feature Categories**:\n"
        "  - `Manage Services`: Restart services, view logs, update scripts.\n"
        "  - `Manage Sessions`: Add, delete, list, freeze/unfreeze Telegram client sessions.\n"
        "  - `FastAPI Configuration`: View and manage the .env file of the FastAPI service.\n"
        "  - `Stats & Monitoring`: View FastAPI health, session statistics, etc.\n\n"
        "‚ö†Ô∏è **High-Risk Operations**:\n"
        "  - Operations like restarting services, updating scripts, or modifying .env files "
        "are high-risk. Always proceed with caution and ensure you have backups if necessary.\n"
        "  - Such operations will require explicit confirmation.\n\n"
        "For detailed information on each feature, navigate to the respective menu section."
    )
    await message.answer(help_text, parse_mode="Markdown")

@router.message(Command("help")) # –î–ª—è –Ω–µ-–∞–¥–º–∏–Ω–æ–≤
async def handle_help_non_admin(message: Message):
    user_info = get_user_info(message.from_user)
    logger.warning(f"/help command received from NON-ADMIN {user_info}. Access denied.")
    await message.answer(
        "üö´ Access Denied.\n"
        "You are not authorized to use this bot. Please contact the administrator."
    )

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ callback'–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
@router.callback_query(F.data == "main_menu", AdminFilter(bot_config.ADMIN_IDS))
async def cq_back_to_main_menu(callback_query: CallbackQuery, state: FSMContext):
    user_info = get_user_info(callback_query.from_user)
    logger.debug(f"Callback 'main_menu' received from admin {user_info}")
    await state.clear() # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    try:
        await callback_query.message.edit_text(
            "üè† Main Menu:",
            reply_markup=get_main_menu_keyboard()
        )
    except Exception as e: # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –∏–ª–∏ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞
        logger.warning(f"Error editing message for main_menu, sending new one: {e}")
        await callback_query.message.answer(
            "üè† Main Menu:",
            reply_markup=get_main_menu_keyboard()
        )
        # –ï—Å–ª–∏ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π, –µ–µ –º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å
        # await callback_query.message.edit_reply_markup(reply_markup=None)
    await callback_query.answer()


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ callback'–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è (–æ–±—â–∞—è) ---
@router.callback_query(F.data == CANCEL_ACTION, AdminFilter(bot_config.ADMIN_IDS))
async def cq_cancel_action(callback_query: CallbackQuery, state: FSMContext):
    user_info = get_user_info(callback_query.from_user)
    logger.info(f"Callback '{CANCEL_ACTION}' received from admin {user_info}. Clearing state and returning to main menu.")
    current_state = await state.get_state()
    if current_state is not None:
        logger.info(f"Cancelling state {current_state} for {user_info}")
        await state.clear()
    
    try:
        await callback_query.message.edit_text(
            "üö´ Action Canceled. Returning to Main Menu.",
            reply_markup=get_main_menu_keyboard()
        )
    except Exception as e:
        logger.warning(f"Error editing message for cancel_action, sending new one: {e}")
        await callback_query.message.answer(
            "üö´ Action Canceled. Returning to Main Menu.",
            reply_markup=get_main_menu_keyboard()
        )
    await callback_query.answer("Action canceled.")


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –æ—Ç –∞–¥–º–∏–Ω–æ–≤ ---
@router.message(AdminFilter(bot_config.ADMIN_IDS))
async def handle_unknown_command_admin(message: Message):
    user_info = get_user_info(message.from_user)
    logger.info(f"Unknown command/message '{message.text}' from admin {user_info}")
    await message.answer(
        "‚ùì Unknown command or message.\n"
        "Please use /start to see the main menu or /help for assistance.",
        reply_markup=get_back_to_menu_keyboard()
    )

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö callback'–æ–≤ –æ—Ç –∞–¥–º–∏–Ω–æ–≤ (–µ—Å–ª–∏ –Ω–µ –ø–æ–π–º–∞–Ω—ã –¥—Ä—É–≥–∏–º–∏ —Ö—ç–Ω–¥–ª–µ—Ä–∞–º–∏) ---
# –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏, –Ω–æ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑–ª–∏—à–Ω–∏–º
@router.callback_query(AdminFilter(bot_config.ADMIN_IDS))
async def handle_unknown_callback_admin(callback_query: CallbackQuery):
    user_info = get_user_info(callback_query.from_user)
    logger.warning(f"Unknown callback query '{callback_query.data}' from admin {user_info}")
    await callback_query.answer("Unknown action.", show_alert=True)
    # –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"
    # await callback_query.message.answer("Unknown action. Please use the main menu.", reply_markup=get_main_menu_keyboard())